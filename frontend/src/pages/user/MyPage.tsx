import { useRecoilState } from 'recoil'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import * as S from '../../styles/user/MyPage.styled'
import BottomNavigation from '../../components/BottomNavigation'
import Header from '../../components/Header'
import useIcon from '../../hooks/useIcon'
import { palette } from '../../constants/Styles'
import ModalWithTwoButton from '../../components/ui/ModalWithTwoButton'
import axiosInstance from '../../utils/FetchCall'
import { myInfoState } from '../../store/recoilState'
import ModalWithoutButton from '../../components/ui/ModalWithoutButton'

interface MenuListInterface {
  title: string
  navigate?: string
  isMargin?: boolean
  onClick?: () => void
}

const MyPage = () => {
  const navigate = useNavigate()
  const { IcExpandRight } = useIcon()

  const [profile, setProfile] = useRecoilState(myInfoState)
  const [isChefModal, setIsChefModal] = useState(false)
  const [isChefCompleteModal, setIsChefCompleteModal] = useState(false)
  const [chefCompleteContent, setChefCompleteContent] = useState('')
  const [isLogoutModal, setIsLogoutModal] = useState(false)
  const [isWithdrawModal, setIsWithdrawModal] = useState(false)

  const MENU_LIST = [
    {
      title: 'üßëüèª‚Äçüç≥ ÏöîÎ¶¨ÏÇ¨ Ïã†Ï≤≠ÌïòÍ∏∞',
      onClick: () => {
        setIsChefModal(true)
      },
    },
    {
      title: 'ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú Í∏Ä',
      navigate: '/my/recipe',
    },
    {
      title: 'ÎÇ¥Í∞Ä ÏûëÏÑ±Ìïú ÎåìÍ∏Ä',
      navigate: '',
    },
    {
      title: 'ÎÇ¥Í∞Ä Ï¢ãÏïÑÏöî Ìïú Í∏Ä',
      navigate: '',
      isMargin: true,
    },
    {
      title: 'ÎÇ¥ Ï†ïÎ≥¥ ÏàòÏ†ï',
      navigate: '',
    },
    {
      title: 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω',
      navigate: '',
    },
    {
      title: 'Î°úÍ∑∏ÏïÑÏõÉ',
      onClick: () => {
        setIsLogoutModal(true)
      },
    },
    {
      title: 'ÌÉàÌá¥ÌïòÍ∏∞',
      onClick: () => {
        // ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Î™®Îã¨ÏùÑ Ïó¥Í±∞ÎÇò Îã§Î•∏ ÎèôÏûëÏùÑ ÏàòÌñâ
        setIsWithdrawModal(true)
      },
    },
  ]

  // ÎßàÏù¥ÌéòÏù¥ÏßÄ Î©îÎâ¥ ÌÅ¥Î¶≠ Ïãú Ìò∏Ï∂ú
  // navigate or event
  const handleMenuItemClick = (menuItem: MenuListInterface) => {
    if (menuItem.navigate) {
      navigate(menuItem.navigate)
    } else if (menuItem.onClick) {
      menuItem.onClick()
    }
  }

  // ÌîÑÎ°úÌïÑ Ï°∞Ìöå API
  const getMyProfile = async () => {
    const response = await axiosInstance.get('/profile/private')
    console.log(response)
    if (response.status === 200) {
      setProfile(response.data)
    }
  }

  // ÏöîÎ¶¨ÏÇ¨ Îì±Î°ù API
  const postChef = async () => {
    try {
      const body = {
        introduce: 'Ïûò Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.',
      }
      const response = await axiosInstance.post(
        '/profile/private/registerchef',
        body
      )
      console.log(response)
      setChefCompleteContent('ÏöîÎ¶¨ÏÇ¨ Îì±Î°ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
    } catch (error) {
      setChefCompleteContent(error.response.data.message)
    }
    setIsChefModal(false)
    setIsChefCompleteModal(true)
    setTimeout(() => {
      setIsChefCompleteModal(false)
    }, 1500)
  }

  useEffect(() => {
    getMyProfile()
  }, [])

  return (
    <>
      <Header />
      <S.Container>
        <S.ProfileButton>
          <S.ProfileImage src={profile?.profileUrl} />
          <S.PrifileInfo>
            <S.Nickname>{profile?.nickName}</S.Nickname>
            <S.Email>{profile?.email}</S.Email>
          </S.PrifileInfo>
          <IcExpandRight size={3.5} color={palette.textPrimary} />
        </S.ProfileButton>
        <S.WrapMyPoint>
          <S.PointDetailButton>
            <S.PointIcon>P</S.PointIcon>ÎÇ¥ Ìè¨Ïù∏Ìä∏
            {/* <IcArrowDropRight size={2.5} color={palette.textPrimary} /> */}
          </S.PointDetailButton>
          <S.PointChargeButton>
            <S.ChargeBadge>Ï∂©Ï†Ñ</S.ChargeBadge>
            10,000 P
          </S.PointChargeButton>
        </S.WrapMyPoint>
        <S.NavigateButtonList>
          {MENU_LIST.map(item => (
            <S.NavigateButton
              key={item.title}
              onClick={() => handleMenuItemClick(item)}
              $isMargin={item.isMargin || false}
            >
              {item.title}
            </S.NavigateButton>
          ))}
        </S.NavigateButtonList>
      </S.Container>

      {/* ÏöîÎ¶¨ÏÇ¨ Îì±Î°ù Modal */}
      {isChefModal && (
        <ModalWithTwoButton
          content="ÏöîÎ¶¨ÏÇ¨ Îì±Î°ùÏùÑ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
          subContent="ÏöîÎ¶¨ÏÇ¨ Îì±Î°ùÏùÑ ÏúÑÌï¥ÏÑúÎäî Í≤åÏãúÎ¨º 3Í∞ú Ïù¥ÏÉÅ Îì±Î°ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
          setIsModalFalse={() => setIsChefModal(false)}
          modalEvent={postChef}
        />
      )}

      {/* ÏöîÎ¶¨ÏÇ¨ Îì±Î°ù ÌõÑ ÎÖ∏Ï∂ú Modal */}
      {isChefCompleteModal && (
        <ModalWithoutButton
          content={chefCompleteContent}
          setIsModalFalse={() => setIsChefModal(false)}
        />
      )}

      {/* Î°úÍ∑∏ÏïÑÏõÉ Modal */}
      {isLogoutModal && (
        <ModalWithTwoButton
          content="Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†Ïñ¥Ïöî?"
          setIsModalFalse={() => setIsLogoutModal(false)}
          modalEvent={() => console.log('Î°úÍ∑∏ÏïÑÏõÉ API Ïó∞Îèô')}
        />
      )}

      {/* ÌÉàÌá¥ Modal */}
      {isWithdrawModal && (
        <ModalWithTwoButton
          content="Ï†ïÎßê ÌÉàÌá¥ÌïòÏãúÍ≤†Ïñ¥Ïöî?"
          subContent="ÌÉàÌá¥ Î≤ÑÌäº ÏÑ†ÌÉù Ïãú, Í≥ÑÏ†ïÏùÄ 
      ÏÇ≠Ï†úÎêòÎ©∞ Î≥µÍµ¨ÎêòÏßÄ ÏïäÏäµÎãàÎã§."
          setIsModalFalse={() => setIsWithdrawModal(false)}
          modalEvent={() => console.log('ÌÉàÌá¥ÌïòÍ∏∞ API Ïó∞Îèô')}
        />
      )}

      <BottomNavigation />
    </>
  )
}

export default MyPage
